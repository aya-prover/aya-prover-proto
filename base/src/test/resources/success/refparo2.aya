-- #5 in public repo
prim I
prim left
prim right
prim arcoe
struct Path (A : I -> Type) (a : A left) (b : A right) : Type
 | at (i : I) : A i {
   | left => a
   | right => b
 }
def path {A : I -> Type} (p : Pi (i : I) -> A i)
  => new Path A (p left) (p right) { | at i => p i }
def `=` Eq {A : Type} (a b : A) : Type => Path (\ i => A) a b
def idp {A : Type} (a : A) : a = a => path (\ i => a)

bind application tighter =

open data Unit : Set | unit

struct Struct : Set
  | value : Unit

def getValue (t : Struct) : Unit => t.value
def setValue (x : Unit) (t : Struct) : Struct
  => new Struct { | value => x }

def value-inv : Pi {t : Struct} {u : Unit} -> u = getValue (setValue u t)
  => \{t} {u} => idp u

def foo {A : Set}
  (get : Struct -> A)
  (set : A -> Struct -> Struct)
  (inv : Pi {t : Struct} {u : A} -> u = get (set u t))
  => unit

def bar : Unit => foo getValue setValue value-inv
